AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: SAM template for simple-product-app

Globals:
  Function:
    Timeout: 10
    MemorySize: 1024

Resources:
  ProductDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ProductTable
      AttributeDefinitions:
        - AttributeName: ProductId
          AttributeType: S

      KeySchema:
        - AttributeName: ProductId
          KeyType: HASH

      ProvisionedThroughput:
        ReadCapacityUnits: 4
        WriteCapacityUnits: 4

  ServerlessHttpApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'OPTIONS,GET,PUT,POST,DELETE'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn: [ApiUsagePlan]
    Properties:
      Name: !Join ["", [{ "Ref": "AWS::StackName" }, "-apikey"]]
      Description: "Product App API Key"
      Enabled: true
      GenerateDistinctId: false
      Value: abcdefg123456665ffghsdghfgdhfgdh4565
      StageKeys:
        - RestApiId: !Ref ServerlessHttpApi
          StageName: Prod

  ApiUsagePlan:
    Type: "AWS::ApiGateway::UsagePlan"
    DependsOn:
      - ServerlessHttpApiProdStage
    Properties:
      ApiStages:
        - ApiId: !Ref ServerlessHttpApi
          Stage: Prod
      Description: !Join [" ", [{ "Ref": "AWS::StackName" }, "usage plan"]]
      Quota:
        Limit: 100000
        Period: MONTH
      UsagePlanName: !Join ["", [{ "Ref": "AWS::StackName" }, "-usage-plan"]]

  ApiUsagePlanKey:
    Type: "AWS::ApiGateway::UsagePlanKey"
    DependsOn:
      - ServerlessHttpApi
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan

  ImageProcessingLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: image-processing-layer
      Description: Layer for sharp dependency
      ContentUri: ./dependencies
      CompatibleRuntimes:
        - nodejs18.x
        
  ProductAppFunction:
    Type: AWS::Serverless::Function
    Properties:
      # ReservedConcurrentExecutions: 10 //Failed to update
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProductDynamoDBTable
        - S3ReadPolicy:
            BucketName: !Ref ProductImageBucket
        - S3WritePolicy:
            BucketName: !Ref ProductImageBucket
        - S3WritePolicy:
            BucketName: !Ref ProductOptimizedImageBucket

      Layers:
        - !Ref ImageProcessingLayer
      CodeUri: product-service/
      Handler: index.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Events:
        CreateProductEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessHttpApi
            Auth:
              ApiKeyRequired: true
            Path: /product
            Method: POST

        GetProductsEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessHttpApi
            Auth:
              ApiKeyRequired: true
            Path: /products
            Method: GET
        DeleteProductEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessHttpApi
            Auth:
              ApiKeyRequired: true
            Path: /product/{productId}
            Method: DELETE
        UploadProductEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessHttpApi
            Auth:
              ApiKeyRequired: true
            Path: /product/upload
            Method: POST

    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - index.ts
        External:
          - "sharp"

  ProductImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 20230820-product-image-bucket
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ProductOptimizedImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 20230820-product-optimized-image-bucket
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: true
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
            AllowedOrigins:
              - '*'

  ProductOptimizedImageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ProductOptimizedImageBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: s3:GetObject
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref ProductOptimizedImageBucket
                - "/*"
            Principal: "*"

  S3UploadEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Event rule to trigger Lambda on S3 uploads
      State: ENABLED
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - Object Created
        detail:
          bucket:
            name:
              - !Ref ProductImageBucket
      Targets:
        - Arn: !GetAtt ProductAppFunction.Arn
          Id: S3UploadLambdaTarget

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProductAppFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt S3UploadEventRule.Arn

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"

Outputs:
  ServerlessHttpApi:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value:
      Fn::Sub: https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  CreateProductApi:
    Description: "Create API endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/product"

  GetProductsApi:
    Description: "Get API endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/products"

  DeleteProductApi:
    Description: "Delete API endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/product/{productId}"

  UploadProductApi:
    Description: "Upload API endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/product/upload"

  ProductAppFunction:
    Description: Product App Function ARN
    Value: !GetAtt ProductAppFunction.Arn

  ProductDynamoDBTable:
    Description: DynamoDB Table for storing products
    Value: !Ref ProductDynamoDBTable

  ProductImageBucketName:
    Description: Name of the product image bucket
    Value: !Ref ProductImageBucket

  S3UploadEventRuleArn:
    Description: ARN of the S3 upload EventBridge rule
    Value: !Ref S3UploadEventRule
