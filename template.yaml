AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Sample SAM Template for simple-product-app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128

Resources:
  ProductDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ProductTable
      AttributeDefinitions:
        - AttributeName: ProductId
          AttributeType: S

      KeySchema:
        - AttributeName: ProductId
          KeyType: HASH

      ProvisionedThroughput:
        ReadCapacityUnits: 4
        WriteCapacityUnits: 4

  ImageProcessingLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: image-processing-layer
      Description: Layer for sharp dependency
      ContentUri: ./dependencies
      CompatibleRuntimes:
        - nodejs18.x

  ProductAppFunction:
    Type: AWS::Serverless::Function
    Properties:
      # ReservedConcurrentExecutions: 10 //Failed to update
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProductDynamoDBTable
        - S3ReadPolicy:
            BucketName: !Ref ProductImageBucket
        - S3WritePolicy:
            BucketName: !Ref ProductImageBucket
        - S3WritePolicy:
            BucketName: !Ref ProductOptimizedImageBucket

      Layers:
        - !Ref ImageProcessingLayer
      CodeUri: product-service/
      Handler: index.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Events:
        CreateProductEvent:
          Type: HttpApi
          Properties:
            ApiId: MyHttpApi
            Path: /product
            Method: POST

        GetProductsEvent:
          Type: HttpApi
          Properties:
            ApiId: MyHttpApi
            Path: /products
            Method: GET
        DeleteProductEvent:
          Type: HttpApi
          Properties:
            ApiId: MyHttpApi
            Path: /product/{productId}
            Method: DELETE
        UploadProductEvent:
          Type: HttpApi
          Properties:
            ApiId: MyHttpApi
            Path: /product/upload
            Method: POST

    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - index.ts
        External:
          - "sharp"

  MyHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: ProductHttpApi
      Auth:
        DefaultAuthorizer: MyOauth2Authorizer
        Authorizers:
          MyOauth2Authorizer: 
            JwtConfiguration:
              issuer: "https://auth0-jwt-authorizer"
              audience: 
                - "https://dev-a5c5obtulhm3rgwq.us.auth0.com/"
            IdentitySource: "$request.header.Authorization"

  ProductImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 20230820-product-image-bucket
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ProductOptimizedImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 20230820-product-optimized-image-bucket
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: true
        RestrictPublicBuckets: false

  ProductOptimizedImageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ProductOptimizedImageBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: s3:GetObject
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref ProductOptimizedImageBucket
                - "/*"
            Principal: "*"

  S3UploadEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Event rule to trigger Lambda on S3 uploads
      State: ENABLED
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - Object Created
        detail:
          bucket:
            name:
              - !Ref ProductImageBucket
      Targets:
        - Arn: !GetAtt ProductAppFunction.Arn
          Id: S3UploadLambdaTarget

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProductAppFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt S3UploadEventRule.Arn

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"

Outputs:
  ProductAppFunction:
    Description: Product App Function ARN
    Value: !GetAtt ProductAppFunction.Arn

  ProductDynamoDBTable:
    Description: DynamoDB Table for storing products.
    Value: !Ref ProductDynamoDBTable

  ProductImageBucketName:
    Description: Name of the product image bucket.
    Value: !Ref ProductImageBucket

  S3UploadEventRuleArn:
    Description: ARN of the S3 upload EventBridge rule.
    Value: !Ref S3UploadEventRule
